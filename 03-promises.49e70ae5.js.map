{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAIMC,EAAOC,SAASC,cAAc,SAE9BC,EAAeF,SAASC,cAAc,kBACtCE,EAAcH,SAASC,cAAc,iBACrCG,EAASJ,SAASC,cAAc,mBAItCF,EAAKM,iBAAiB,UAItB,SAA8BC,G,kBAsB9B,IAAuBC,EAAUC,GAAVD,EAXLE,EAWeD,EAXZE,EAYZ,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEL,WAAUC,UAEpBK,EAAO,CAAEN,WAAUC,S,GAEpBA,E,KAnBAS,MAAK,SAAAC,GAAWA,EAARX,S,IAAUC,EAAKU,EAALV,MACjBW,EAAAtB,GAASuB,OAAOC,QAAQ,uBAAiCC,OAARb,EAAE,QAAYa,OAANd,EAAM,M,IAEhEe,OAAM,SAAAL,GAAWA,EAARX,S,IAAUC,EAAKU,EAALV,MAClBW,EAAAtB,GAASuB,OAAOI,QAAQ,sBAA8BF,OAARb,EAAE,QAAYa,OAANd,EAAM,M,IAEhEE,GAASe,C,EAjBXnB,EAAEoB,iBAEF,IAAIhB,EAAQR,EAAayB,cACnBF,EAAYtB,EAAYwB,cACxBC,EAAYxB,EAAOuB,cACzBzB,EAAa2B,MAAQ,GACrB1B,EAAY0B,MAAQ,GACpBzB,EAAOyB,MAAQ,GAEf,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAWE,IAAGC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Form and its inputs\n\nconst form = document.querySelector('.form');\n\nconst firstDelayMs = document.querySelector('[name=\"delay\"]');\nconst delayStepMs = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\n// Event listener after submitting the form\n\nform.addEventListener('submit', submitCreatePromises);\n\n// Loop to create promises from function createPromise after event listener\n\nfunction submitCreatePromises(e) {\n  e.preventDefault();\n\n  let delay = firstDelayMs.valueAsNumber;\n  const delayStep = delayStepMs.valueAsNumber;\n  const amountVal = amount.valueAsNumber;\n  firstDelayMs.value = '';\n  delayStepMs.value = '';\n  amount.value = '';\n\n  for (let i = 1; i <= amountVal; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${i} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${i} in ${delay}ms`);\n      });\n    delay += delayStep;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$firstDelayMs","$ce04d3a99e08e73b$var$delayStepMs","$ce04d3a99e08e73b$var$amount","addEventListener","e","position","delay","i","delay1","Promise","resolve","reject","setTimeout","Math","random","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","delayStep","preventDefault","valueAsNumber","amountVal","value","i1","_loop"],"version":3,"file":"03-promises.49e70ae5.js.map"}